#!/usr/bin/env python3
"""
Script de Verifica√ß√£o Completa do Sistema
Verifica arquivos, depend√™ncias e funcionalidades
"""

import os
import sys
import json
import importlib
from pathlib import Path
import subprocess

def check_file_structure():
    """Verifica estrutura de arquivos"""
    
    print("üîç VERIFICANDO ESTRUTURA DE ARQUIVOS")
    print("=" * 50)
    
    # Arquivos obrigat√≥rios
    required_files = {
        'src/main.py': 'Arquivo principal',
        'src/evolutionary_ai_engine.py': 'IA Evolutiva',
        'src/__init__.py': 'Init do src',
        'requirements.txt': 'Depend√™ncias',
        'setup.py': 'Configura√ß√£o Python',
        'README.md': 'Documenta√ß√£o'
    }
    
    # Arquivos opcionais mas importantes
    optional_files = {
        'src/main_integrated.py': 'Sistema integrado',
        'src/security_system.py': 'Sistema de seguran√ßa', 
        'src/professional_ui.py': 'Interface profissional',
        'src/advanced_report_generator.py': 'Gerador de relat√≥rios',
        'config/ai_learning_config.json': 'Config de aprendizado',
        'data/learning_database.json': 'Base de dados IA',
        'tests/test_ai_engine.py': 'Testes da IA',
        'tests/__init__.py': 'Init dos testes'
    }
    
    # Verificar arquivos obrigat√≥rios
    missing_required = []
    for file_path, description in required_files.items():
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path} ({size} bytes) - {description}")
        else:
            print(f"‚ùå {file_path} - {description} [FALTANDO]")
            missing_required.append(file_path)
    
    print(f"\nüìã ARQUIVOS OPCIONAIS:")
    missing_optional = []
    for file_path, description in optional_files.items():
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            if size < 100:
                print(f"‚ö†Ô∏è {file_path} ({size} bytes) - {description} [MUITO PEQUENO]")
            else:
                print(f"‚úÖ {file_path} ({size} bytes) - {description}")
        else:
            print(f"‚ùå {file_path} - {description} [FALTANDO]")
            missing_optional.append(file_path)
    
    return missing_required, missing_optional

def check_dependencies():
    """Verifica depend√™ncias Python"""
    
    print(f"\nüêç VERIFICANDO DEPEND√äNCIAS PYTHON")
    print("=" * 50)
    
    critical_deps = [
        'streamlit', 'pydicom', 'numpy', 'pandas', 'matplotlib', 
        'plotly', 'scipy', 'PIL'
    ]
    
    optional_deps = [
        'cv2', 'reportlab', 'sklearn', 'skimage'
    ]
    
    missing_critical = []
    missing_optional = []
    
    # Verificar depend√™ncias cr√≠ticas
    for dep in critical_deps:
        try:
            module = importlib.import_module(dep)
            version = getattr(module, '__version__', 'N/A')
            print(f"‚úÖ {dep} v{version}")
        except ImportError:
            print(f"‚ùå {dep} [FALTANDO - CR√çTICO]")
            missing_critical.append(dep)
    
    # Verificar depend√™ncias opcionais
    print(f"\nüì¶ DEPEND√äNCIAS OPCIONAIS:")
    for dep in optional_deps:
        try:
            module = importlib.import_module(dep)
            version = getattr(module, '__version__', 'N/A')
            print(f"‚úÖ {dep} v{version}")
        except ImportError:
            print(f"‚ö†Ô∏è {dep} [FALTANDO - OPCIONAL]")
            missing_optional.append(dep)
    
    return missing_critical, missing_optional

def check_ai_functionality():
    """Verifica funcionalidade da IA"""
    
    print(f"\nüß† VERIFICANDO FUNCIONALIDADE DA IA")
    print("=" * 50)
    
    try:
        sys.path.append('src')
        from evolutionary_ai_engine import EnhancedForensicAI, RAIndexCalculator
        
        print("‚úÖ Importa√ß√£o da IA bem-sucedida")
        
        # Testar RA-Index
        ra_calc = RAIndexCalculator()
        test_classification = {
            "Cavidades Card√≠acas": "II",
            "Par√™nquima Hep√°tico e Vasos": "I",
            "Veia Inominada Esquerda": "0",
            "Aorta Abdominal": "0", 
            "Par√™nquima Renal": "I",
            "V√©rtebra L3": "0",
            "Tecidos Subcut√¢neos Peitorais": "0"
        }
        
        ra_result = ra_calc.calculate_ra_index(test_classification)
        
        if 'ra_index' in ra_result:
            print(f"‚úÖ RA-Index calculado: {ra_result['ra_index']}")
        else:
            print("‚ùå Falha no c√°lculo do RA-Index")
            return False
        
        # Testar IA completa
        ai_system = EnhancedForensicAI()
        print("‚úÖ Sistema de IA inicializado")
        
        # Testar an√°lise com dados simulados
        test_image = np.random.randint(-500, 500, (50, 50), dtype=np.int16)
        env_params = {'temperature': 25, 'humidity': 60}
        
        analysis_result = ai_system.comprehensive_analysis(test_image, env_params)
        
        if 'ra_index' in analysis_result:
            print("‚úÖ An√°lise completa funcionando")
            return True
        else:
            print("‚ùå Falha na an√°lise completa")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro na IA: {e}")
        return False

def check_streamlit_compatibility():
    """Verifica compatibilidade com Streamlit"""
    
    print(f"\nüåê VERIFICANDO STREAMLIT")
    print("=" * 50)
    
    try:
        import streamlit as st
        print(f"‚úÖ Streamlit v{st.__version__} dispon√≠vel")
        
        # Verificar se main.py √© v√°lido para Streamlit
        if os.path.exists('src/main.py'):
            with open('src/main.py', 'r') as f:
                content = f.read()
                
            if 'st.' in content and 'def main():' in content:
                print("‚úÖ main.py compat√≠vel com Streamlit")
            else:
                print("‚ö†Ô∏è main.py pode ter problemas de compatibilidade")
        
        return True
        
    except ImportError:
        print("‚ùå Streamlit n√£o dispon√≠vel")
        return False

def check_data_directories():
    """Verifica diret√≥rios de dados"""
    
    print(f"\nüìÅ VERIFICANDO DIRET√ìRIOS DE DADOS")
    print("=" * 50)
    
    required_dirs = ['data', 'logs', 'models', 'config', 'security']
    
    for directory in required_dirs:
        if os.path.exists(directory):
            files_count = len([f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))])
            print(f"‚úÖ {directory}/ ({files_count} arquivos)")
        else:
            print(f"‚ùå {directory}/ [FALTANDO]")
            os.makedirs(directory, exist_ok=True)
            print(f"üîß {directory}/ criado")

def test_basic_functionality():
    """Testa funcionalidades b√°sicas"""
    
    print(f"\n‚ö° TESTANDO FUNCIONALIDADES B√ÅSICAS")
    print("=" * 50)
    
    try:
        # Teste 1: Importa√ß√£o numpy
        import numpy as np
        test_array = np.random.rand(10, 10)
        print(f"‚úÖ NumPy funcionando - Array {test_array.shape}")
        
        # Teste 2: Importa√ß√£o pandas
        import pandas as pd
        test_df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
        print(f"‚úÖ Pandas funcionando - DataFrame {test_df.shape}")
        
        # Teste 3: Importa√ß√£o plotly
        import plotly.graph_objects as go
        fig = go.Figure()
        print("‚úÖ Plotly funcionando")
        
        # Teste 4: Importa√ß√£o scipy
        from scipy import stats
        test_stat = stats.norm.rvs(size=10)
        print(f"‚úÖ SciPy funcionando - Stats OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nas funcionalidades b√°sicas: {e}")
        return False

def generate_system_report():
    """Gera relat√≥rio completo do sistema"""
    
    print(f"\nüìä GERANDO RELAT√ìRIO DO SISTEMA")
    print("=" * 50)
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'python_version': sys.version,
        'platform': sys.platform,
        'file_check': {},
        'dependency_check': {},
        'functionality_check': {}
    }
    
    # Executar verifica√ß√µes
    missing_req, missing_opt = check_file_structure()
    missing_critical, missing_optional = check_dependencies()
    ai_working = check_ai_functionality()
    streamlit_ok = check_streamlit_compatibility()
    basic_ok = test_basic_functionality()
    
    # Compilar relat√≥rio
    report['file_check'] = {
        'missing_required': missing_req,
        'missing_optional': missing_opt
    }
    
    report['dependency_check'] = {
        'missing_critical': missing_critical,
        'missing_optional': missing_optional
    }
    
    report['functionality_check'] = {
        'ai_working': ai_working,
        'streamlit_compatible': streamlit_ok,
        'basic_functions': basic_ok
    }
    
    # Status geral
    overall_status = (
        len(missing_req) == 0 and 
        len(missing_critical) == 0 and
        ai_working and 
        streamlit_ok and 
        basic_ok
    )
    
    report['overall_status'] = 'READY' if overall_status else 'NEEDS_ATTENTION'
    
    # Salvar relat√≥rio
    with open('system_check_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"\nüìã RELAT√ìRIO SALVO: system_check_report.json")
    
    # Mostrar status final
    print(f"\nüéØ STATUS FINAL DO SISTEMA")
    print("=" * 50)
    
    if overall_status:
        print("üéâ SISTEMA PRONTO PARA USO!")
        print("üöÄ Execute: streamlit run src/main.py")
    else:
        print("‚ö†Ô∏è SISTEMA PRECISA DE ATEN√á√ÉO")
        if missing_req:
            print(f"‚ùå Arquivos obrigat√≥rios faltando: {missing_req}")
        if missing_critical:
            print(f"‚ùå Depend√™ncias cr√≠ticas faltando: {missing_critical}")
        if not ai_working:
            print("‚ùå IA n√£o est√° funcionando")
        if not streamlit_ok:
            print("‚ùå Problema com Streamlit")
    
    return overall_status

if __name__ == "__main__":
    print("üî¨ FORENSIC AI SYSTEM - VERIFICA√á√ÉO COMPLETA")
    print("=" * 60)
    
    # Verificar diret√≥rios primeiro
    check_data_directories()
    
    # Executar verifica√ß√£o completa
    system_ready = generate_system_report()
    
    print(f"\nüèÅ VERIFICA√á√ÉO CONCLU√çDA")
    
    if system_ready:
        print("üéä Sistema 100% funcional!")
    else:
        print("üîß Sistema precisa de ajustes")
